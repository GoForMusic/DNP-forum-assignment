@page "/Register"
@using Microsoft.AspNetCore.Components
@using Domain.Models
@using Domain.Contracts

@inject IUserService _userService;
@inject NavigationManager NavigationManager








<AuthorizeView>
    <NotAuthorized>


        <main class="login-form">
            <div class="cotainer">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">Register</div>
                            <div class="card-body">
                                <form>
                                    
                                    <div class="form-group row">
                                        <label for="email_address" class="col-md-4 col-form-label text-md-right">Username</label>
                                        <div class="col-md-6">
                                            <input type="text" id="email_address" @bind="newUserItem.UserName" class="form-control" name="username" required autofocus>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="password" class="col-md-4 col-form-label text-md-right">Password</label>
                                        <div class="col-md-6">
                                            <input type="password" id="password" @bind="newUserItem.Password" class="form-control" name="password" required autofocus>
                                        </div>
                                    </div>
                                    <div class="form-group row">
                                        <label for="password" class="col-md-4 col-form-label text-md-right">City</label>
                                        <div class="col-md-6">
                                            <input type="text" id="city" @bind="newUserItem.City" class="form-control" name="city" required autofocus>
                                        </div>
                                    </div>

                                    <div class="form-group row">
                                        <label for="password" class="col-md-4 col-form-label text-md-right">Birth Date</label>
                                        <div class="col-md-6">
                                            <input type="date" id="date of birth" @bind="today" class="form-control" name="BirthDate" required autofocus>
                                        </div>
                                    </div>

                                    <div class="col-md-6 offset-md-4">
                                        <button class="btn btn-primary" @onclick="RegisterAsync">
                                            Create
                                        </button>
                                        <a href="/Login" class="btn btn-link">
                                            You arlready have an account?
                                        </a>
                                    </div>
                                    <div class="col-md-6 offset-md-4">

                                        @if (!string.IsNullOrEmpty(errorMessage))
                                        {
                                            <span class="help-block" style="color: red">@errorMessage</span>
                                        }
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>


    </NotAuthorized>
    <Authorized>
    </Authorized>
</AuthorizeView>


@code {
    private User? newUserItem= new User();
    private DateTime today = DateTime.Today;
    
    private string? errorMessage;

    private async Task RegisterAsync()
    {
        try
        {
            if (newUserItem.UserName == null || newUserItem.Password == null || newUserItem.City == null)
            {
                throw new Exception("All the fields are mandatory");
            }else
            {
                newUserItem.Role = "User";
                newUserItem.BirthDate = today;
                await _userService.AddUser(newUserItem);
                NavigationManager.NavigateTo("/");
            }
            
                
        }catch(Exception e)
        {
            errorMessage = $"Error: {e.Message}";
        }
    }

}