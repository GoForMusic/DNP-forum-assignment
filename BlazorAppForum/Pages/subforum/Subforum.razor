@page "/subforum/{Id}"
@using Domain.Models
@using Domain.Contracts
@using UIElements
@using System.Security.Claims

@inject ISubForumService _subForumService
@inject NavigationManager Navigation
@inject IUserService _userService

@namespace subforum

<div class="filterbar">
    <div class="filterscontainer">
        <div class="filter">
            <div>
                <label>Title:</label>
            </div>
            <div>
                <input type="text" class="owneridfield" @oninput="args => UpdateOwnerFilter(args)"/>
            </div>
        </div>
    </div>
</div>
<AuthorizeView>
    <Authorized>
        <div class="filterbar">
            <div class="filterscontainer">
                <div class="filter">
                    <button type="button" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/subforum/" + subForum.Id + "/AddPost"))">
                        Add Post
                    </button>
                </div>
            </div>
        </div>
        
    </Authorized>
    <NotAuthorized>
        
    </NotAuthorized>
</AuthorizeView>

@if (_postsCollection  == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else

{
@foreach (var item in _postsCollection)
{
    <div class="container-fluid mt-100">
        <div class="row">
            <div class="col-md-12">
                <div class="card mb-4">
                    <div class="card-header" id="@adminBanner(item)">
                        <div class="media flex-wrap w-100 align-items-center"> <img src="https://i.imgur.com/iNmBizf.jpg" class="d-block ui-w-40 rounded-circle" alt="">
                            <div class="media-body ml-3"> <a href="javascript:void(0)" data-abc="true">@item.WrittenBy.UserName</a>
                                <div class="text-muted small">@item.date_posted</div>
                            </div>
                            <div class="text-muted small ml-3">
                                <div></div>
                                
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @item.Header
                    </div>
                    <div class="card-footer d-flex flex-wrap justify-content-between align-items-center px-0 pt-0 pb-3">
                        <div class="px-4 pt-3">
                            <a href="javascript:void(0)" class="text-muted d-inline-flex align-items-center align-middle" data-abc="true">
                                 <image class="align-middle oi oi-thumb-up" @onclick="@(() => vote(item))"></image>
                            </a> 
                            <span class="text-muted d-inline-flex align-items-center align-middle ml-4">
                                 <span class="align-middle oi">@item.Votes.Count</span>
                            </span>
                        </div>
                        <div class="px-4 pt-3">
                            <AuthorizeView Policy="SubForumAdmin">
                                <Authorized>
                                    <button type="button" class="btn btn-warning" @onclick="@(() => ShowEdit(item))">
                                        Edit
                                    </button>
                                    <button type="button" class="btn btn-danger" @onclick="@(() => removePost(item))">
                                        DELETE
                                    </button>
                                </Authorized>
                                <NotAuthorized>
                                </NotAuthorized>
                            </AuthorizeView>
                            <button type="button" class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/subforum/" + subForum.Id + "/post/" + item.Id))">
                                Show More
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
}




@if (showModal)
{
    <Modal>
        <main class="login-form">
                    <div class="container-fluid">
                        <div class="row justify-content-center">
                            <div class="col-md-12">
                                <div class="card">
                                    <div class="card-header">EDIT POST</div>
                                    <div class="card-body">
                                        <div class="form-group row">
                                                <label for="email_address" class="col-md-4 col-form-label text-md-right">Title</label>
                                                <div class="col-md-6">
                                                    <input type="text" id="title" @bind="editedTitle" class="form-control" name="title" required autofocus>
                                                </div>
                                            </div>
                                            <div class="form-group row">
                                                <label for="password" class="col-md-4 col-form-label text-md-right">Description</label>
                                                <div class="col-md-6">
                                                    <textarea id="summernote" rows="5" class="form-control" @bind="editBody"></textarea>
                                                </div>
                                            </div>
        
                                            <div class="col-md-6 offset-md-4">
                                                <button class="btn btn-primary" @onclick="AcceptEdit">
                                                    Accept
                                                </button>
                                                <button class="btn btn-warning" @onclick="@(() => showModal = false)">Cancel</button>
                                            </div>
                                            <div class="col-md-6 offset-md-4">
        
                                                @if (!string.IsNullOrEmpty(errorLabel))
                                                {
                                                    <span class="help-block" style="color: red">@errorLabel</span>
                                                }
                                            </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
    </Modal>
}


@code {
    
    
    //show modal
    private bool showModal;
    private string? editId;
    private string editedTitle = String.Empty;
    private string editBody = String.Empty;
    private Post postToEdit = new();

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    //param ID
    [Parameter]
    public string Id { get; set; }
    
    //error labe;
    private string errorLabel=String.Empty;
    
    //post and subforum collection
    private ICollection<Post>? _postsCollection;
    private SubForum? subForum;
    private User? _user;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            subForum = await _subForumService.GetSubForumByID(Id);
            _postsCollection = subForum.Posts;
        }
        catch (Exception e)
        {
            errorLabel = $"Error: {e.Message}";
        }
        try
        {
            AuthenticationState authState = await AuthState;
            ClaimsPrincipal user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
    //get user clas base on the user identity
                _user = await _userService.GetUser(user.Identity.Name);
            }
        }
        catch (Exception e)
        {
        }
    }

    private string adminBanner(Post item)
    {
        if (item.WrittenBy.Role.Equals("Admin")) return "admin";
        else return "normal";
    }

    private async Task removePost(Post post)
    {
        subForum.Posts.Remove(post);
        await _subForumService.UpdateSubForum(subForum);
    }
    
    //MODAL editor
    
    private void ShowEdit(Post post)
    {
        postToEdit = post;
        editId = post.Id;
        editedTitle = post.Header;
        editBody = post.Body;
        showModal = true;
    }
    
    private async Task AcceptEdit()
    {
        try
        {
            Post localPost = _postsCollection.First((t => t.Id.Equals(editId)));
            localPost.Header = editedTitle;
            localPost.Body = editBody;
            await _subForumService.UpdateSubForum(subForum);
            showModal = false;
        }
        catch (Exception e)
        {
            errorLabel = e.Message;
        }
    }

    //vote system
    private async Task vote(Post item)
    {
        if (_user != null)
        {
            if (!item.Votes.Contains(item.Votes.FirstOrDefault(t => t.Voter.Id.Equals(_user.Id))))
            {
                Vote local = new Vote();
                local.Voter = _user;
                item.Votes.Add(local);
                Console.WriteLine(item.Votes.Count);
                await _subForumService.UpdateSubForum(subForum);
            }
        }

    }
    
    private async Task UpdateOwnerFilter(ChangeEventArgs args)
    {
        string value = (string)args.Value;
        if (string.IsNullOrEmpty(value))
        {

            
        }
        {
            _postsCollection = subForum.Posts;
        }
    }
}