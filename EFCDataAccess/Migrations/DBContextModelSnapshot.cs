// <auto-generated />
using System;
using EFCDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCDataAccess.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WrittenById")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("WrittenById");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.Forum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubForumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WrittenById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("date_posted")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SubForumId");

                    b.HasIndex("WrittenById");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entities.Models.SubForum", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("OwnedById");

                    b.ToTable("SubForums");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ForumId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Models.Vote", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostId")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoterId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("Entities.Models.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenById");

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.HasOne("Entities.Models.SubForum", null)
                        .WithMany("Posts")
                        .HasForeignKey("SubForumId");

                    b.HasOne("Entities.Models.User", "WrittenBy")
                        .WithMany()
                        .HasForeignKey("WrittenById");

                    b.Navigation("WrittenBy");
                });

            modelBuilder.Entity("Entities.Models.SubForum", b =>
                {
                    b.HasOne("Entities.Models.Forum", null)
                        .WithMany("SubForums")
                        .HasForeignKey("ForumId");

                    b.HasOne("Entities.Models.User", "OwnedBy")
                        .WithMany()
                        .HasForeignKey("OwnedById");

                    b.Navigation("OwnedBy");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.Forum", null)
                        .WithMany("Users")
                        .HasForeignKey("ForumId");
                });

            modelBuilder.Entity("Entities.Models.Vote", b =>
                {
                    b.HasOne("Entities.Models.Comment", null)
                        .WithMany("Votes")
                        .HasForeignKey("CommentId");

                    b.HasOne("Entities.Models.Post", null)
                        .WithMany("Votes")
                        .HasForeignKey("PostId");

                    b.HasOne("Entities.Models.User", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Entities.Models.Forum", b =>
                {
                    b.Navigation("SubForums");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Entities.Models.SubForum", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
